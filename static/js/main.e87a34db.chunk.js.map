{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","disabled","className","src","alt","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","id","useEffect","prevCards","resetTurn","setTimeout","console","log","prevTurns","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAEe,SAASA,EAAT,GAAiE,IAA5CC,EAA2C,EAA3CA,KAAOC,EAAoC,EAApCA,aAAeC,EAAqB,EAArBA,QAAUC,EAAW,EAAXA,SAShE,OACI,qBAAKC,UAAU,OAAf,SACI,sBAAKA,UAAWF,EAAU,UAAY,GAAtC,UACI,qBAAKE,UAAU,QAAQC,IAAKL,EAAKK,IAAKC,IAAI,eAC1C,qBAAKF,UAAU,OAAOC,IAAI,kBAAkBE,QAXpC,WACZJ,GACAF,EAAaD,IASyDM,IAAI,mBCXtF,IAAME,EAAa,CACjB,CAAE,IAAO,qBAAsBC,SAAQ,GACvC,CAAE,IAAO,qBAAsBA,SAAQ,GACvC,CAAE,IAAO,mBAAoBA,SAAQ,GACrC,CAAE,IAAO,qBAAsBA,SAAQ,GACvC,CAAE,IAAO,qBAAsBA,SAAQ,GACvC,CAAE,IAAO,oBAAqBA,SAAQ,IAuFzBC,MApFf,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAkCJ,mBAAS,MAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAgCR,oBAAS,GAAzC,mBAAOR,EAAP,KAAiBiB,EAAjB,KAGMC,EAAe,WACnB,IAAMC,EAAgB,UAAId,EAAeA,GACtCe,MAAK,kBAAMC,KAAKC,SAAW,MAC3BC,KAAI,SAAC1B,GAAD,mBAAC,eAAeA,GAAhB,IAAsB2B,GAAIH,KAAKC,cAEpCR,EAAa,MACbE,EAAa,MACbN,EAASS,GACTP,EAAS,IAIPd,EAAe,SAACD,GACpBgB,EAAYG,EAAanB,GAAQiB,EAAajB,IAIhD4B,qBAAU,WAELZ,GAAaE,IACdE,GAAY,GACTJ,EAAUX,MAAQa,EAAUb,KAC7BQ,GAAS,SAAAgB,GACP,OAAOA,EAAUH,KAAI,SAAA1B,GACnB,OAAIA,EAAKK,MAAQW,EAAUX,IAClB,2BAAIL,GAAX,IAAiBS,SAAS,IAGnBT,QAIb8B,KAGAC,YAAW,kBAAMD,MAAa,QAGlC,CAACd,EAAUE,IAEbc,QAAQC,IAAIrB,GAIZ,IAAMkB,EAAY,WAChBb,EAAa,MACbE,EAAa,MACbJ,GAAS,SAAAmB,GAAS,OAAIA,EAAY,KAClCd,GAAY,IAOd,OAJAQ,qBAAU,WACRP,MACC,IAGD,sBAAKjB,UAAU,MAAf,UACE,6CACA,wBAAQG,QAASc,EAAjB,sBAEA,qBAAKjB,UAAU,YAAf,SACGQ,EAAMc,KAAI,SAAA1B,GAAI,OACb,cAAC,EAAD,CAEAA,KAAMA,EACNC,aAAcA,EACdC,QAASF,IAASgB,GAAahB,IAASkB,GAAalB,EAAKS,QAC1DN,SAAUA,GAJLH,EAAK2B,SAOd,wCAAWb,SCvFjBqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e87a34db.chunk.js","sourcesContent":["import \"./SingleCard.css\"\r\n\r\nexport default function SingleCard({card , handleChoice , flipped , disabled}) {\r\n\r\n    const handleClick = () => {\r\n        if(!disabled) {\r\n            handleChoice(card)\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div className={flipped ? \"flipped\" : \"\"}>\r\n                <img className=\"front\" src={card.src} alt=\"card front\" />\r\n                <img className=\"back\" src=\"./img/cover.png\" onClick={handleClick} alt=\"card back\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\nimport './App.css'\nimport SingleCard from './components/SingleCard'\n\nconst cardImages = [\n  { \"src\": \"./img/helmet-1.png\", matched:false },\n  { \"src\": \"./img/potion-1.png\", matched:false },\n  { \"src\": \"./img/ring-1.png\", matched:false },\n  { \"src\": \"./img/scroll-1.png\", matched:false },\n  { \"src\": \"./img/shield-1.png\", matched:false },\n  { \"src\": \"./img/sword-1.png\", matched:false },\n]\n\nfunction App() {\n\n  const [cards, setCards] = useState([])\n  const [turns, setTurns] = useState(0)\n  const [choiceOne, setChoiceOne] = useState(null)\n  const [choiceTwo, setChoiceTwo] = useState(null)\n  const [disabled, setDisabled] = useState(false)\n\n  //shuffle cards\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }))\n\n      setChoiceOne(null)\n      setChoiceTwo(null)\n      setCards(shuffledCards)\n      setTurns(0)\n  }\n\n  //handle choice\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\n  }\n\n  //compare the 2 selected cards\n  useEffect(() => {\n    \n    if(choiceOne && choiceTwo) {\n      setDisabled(true)\n      if(choiceOne.src === choiceTwo.src){\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return {...card, matched: true}\n            }\n            else {\n              return card\n            }\n          })\n        })\n        resetTurn()\n      }\n      else {\n        setTimeout(() => resetTurn(), 1000)\n      }\n    }\n  },[choiceOne,choiceTwo])\n\n  console.log(cards)\n\n  \n  // reset choices & increase turn\n  const resetTurn = () => {\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(prevTurns => prevTurns + 1)\n    setDisabled(false)\n  }\n\n  useEffect(() => {\n    shuffleCards()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1>Magic Match</h1>\n      <button onClick={shuffleCards}>New Game</button>\n\n      <div className=\"card-grid\">\n        {cards.map(card => (\n          <SingleCard \n          key={card.id} \n          card={card} \n          handleChoice={handleChoice} \n          flipped={card === choiceOne || card === choiceTwo || card.matched}\n          disabled={disabled}/>\n          ))}\n      </div>\n      <p>Turns: {turns}</p>\n    </div>\n  );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}